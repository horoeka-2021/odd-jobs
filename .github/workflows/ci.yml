# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the dev branch
  push:
    branches: [ dev, prod, devops-91-cd ]
  pull_request:
    branches: [ dev, prod ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [14.x]

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
            
      - name: Install Dependencies
        run: npm ci
        
      - name: Linting
        # run: "npm run lint -- --rule 'no-console: 2'"
        # run: "npm run lint -- --quiet"
        run: "npm run lint"
        
      - name: Test
        run: npm run test-no-watch
        # run: npx jest server/routes/events.test.js  

  deploy-dev:
    runs-on: ubuntu-latest
    # this prevents deployment for pull requests and works only for push in dev
    if: ${{ github.ref == 'refs/heads/devops-91-cd' }} # this should be dev
    needs: build
    # Each environment can have different evn vars which includes different Auth0 secrets 
    # Those secrets can be different than the repository secrets
    environment: development
    steps:
    - uses: actions/checkout@v2
     
    - uses: akhileshns/heroku-deploy@master
      with:
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
        heroku_email: ${{secrets.HEROKU_EMAIL}}
      env:
        HD_NODE_ENV: development
        HD_JWT_SECRET: ${{secrets.JWT_SECRET}}
        HD_AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
        HD_AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
        HD_AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}   
        
  deploy-prod:
    runs-on: ubuntu-latest
    # this prevents deployment for pull requests and works only for push in dev
    if: ${{ github.ref == 'refs/heads/prod' }} # this should be dev
    needs: build
    # Each environment can have different evn vars which includes different Auth0 secrets 
    # Those secrets can be different than the repository secrets
    environment: production
    steps:
    - uses: actions/checkout@v2
     
    - uses: akhileshns/heroku-deploy@master
      with:
        heroku_api_key: ${{secrets.HEROKU_API_KEY}}
        heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
        heroku_email: ${{secrets.HEROKU_EMAIL}}
      env:
        HD_NODE_ENV: production
        HD_JWT_SECRET: ${{secrets.JWT_SECRET}}
        HD_AUTH0_DOMAIN: ${{ secrets.AUTH0_DOMAIN }}
        HD_AUTH0_CLIENT_ID: ${{ secrets.AUTH0_CLIENT_ID }}
        HD_AUTH0_CLIENT_SECRET: ${{ secrets.AUTH0_CLIENT_SECRET }}
        